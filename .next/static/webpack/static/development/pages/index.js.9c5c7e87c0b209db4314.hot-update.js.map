{"version":3,"file":"static/webpack/static/development/pages/index.js.9c5c7e87c0b209db4314.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js","webpack:///./pages/index.js"],"sourcesContent":["import _Array$isArray from \"../../core-js/array/is-array\";\nexport default function _arrayWithHoles(arr) {\n  if (_Array$isArray(arr)) return arr;\n}","import _getIterator from \"../../core-js/get-iterator\";\nimport _isIterable from \"../../core-js/is-iterable\";\nexport default function _iterableToArrayLimit(arr, i) {\n  if (!(_isIterable(Object(arr)) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","import Layout from '../components/MyLayout';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nconst TEST_ENTITIES = [\n    {\n        name: \"Rivulet\",\n        initiative: Math.floor(Math.random() * 20) + 1 + 5,\n    },\n    {\n        name: \"Rimaru\",\n        initiative: Math.floor(Math.random() * 20) + 1 + 4,\n    },\n    {\n        name: \"Gesh\",\n        initiative: Math.floor(Math.random() * 20) + 1 + 3,\n    },\n    {\n        name: \"Skytree\",\n        initiative: Math.floor(Math.random() * 20) + 1 + 2,\n    },\n    {\n        name: \"NPC 1\",\n        initiative: Math.floor(Math.random() * 20) + 1,\n    },\n    {\n        name: \"NPC 2\",\n        initiative: Math.floor(Math.random() * 20) + 1,\n    },\n    {\n        name: \"NPC 3\",\n        initiative: Math.floor(Math.random() * 20) + 1,\n    },\n    {\n        name: \"NPC 4\",\n        initiative: Math.floor(Math.random() * 20) + 1,\n    }\n];\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nclass InitiativeTracker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameInput: '',\n            initiativeInput: '',\n            entities: [],\n        }\n\n        this.addEntity = this.addEntity.bind(this);\n        this.handleNameInputChange = this.handleNameInputChange.bind(this);\n        this.handleInitiativeInputChange = this.handleInitiativeInputChange.bind(this);\n        this.forward = this.forward.bind(this);\n        this.backward = this.backward.bind(this);\n        this.onDragEnd = this.onDragEnd.bind(this);\n\n        this.state.entities = this.sortEntities(TEST_ENTITIES);\n    }\n\n    handleNameInputChange = (e) => {\n        this.setState({ nameInput: e.target.value });\n    }\n\n    handleInitiativeInputChange = (e) => {\n        this.setState({ initiativeInput: e.target.value });\n    }\n\n    addEntity = (e, sort) => {\n        e.preventDefault();\n        var newState = {};\n        newState.entities = this.state.entities.concat({\n            name: this.state.nameInput,\n            initiative: this.state.initiativeInput,\n        });\n        if (sort) {\n            newState.entities = this.sortEntities(newState.entities);\n        }\n        this.setState(newState);\n    }\n\n    sortEntities = arr => (\n        arr.sort((x, y) => {\n            if (x.initiative < y.initiative) {\n                return -1;\n            }\n            if (x.initiative > y.initiative) {\n                return 1;\n            }\n            return 0;\n        }).reverse()\n    )\n\n    forward = () => {\n        var newOrder = this.state.entities;\n        newOrder.push(newOrder.shift());\n        this.setState({ entities: newOrder });\n    }\n\n    backward = () => {\n        var newOrder = this.state.entities;\n        newOrder.unshift(newOrder.pop());\n        this.setState({ entities: newOrder });\n    }\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n\n        const items = reorder(\n            this.state.items,\n            result.source.index,\n            result.destination.index\n        );\n\n        this.setState({\n            entities: items\n        });\n    }\n\n    render() {\n        var first = true;\n        const items = this.state.entities.map((item, key) => (\n            <tr key={key}>\n                <td className=\"name\">{item.name}</td>\n                <td className=\"initative\">{item.initiative}</td>\n            </tr>\n        ));\n\n        return (\n            <div>\n                <div>\n                    <table className=\"initiative-table\">\n                        <thead>\n                            <th>Name</th>\n                            <th>Initiative</th>\n                        </thead>\n                        <tbody>\n                            {items}\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                    <button onClick={this.forward}>Advance</button>\n                    <button onClick={this.backward}>Go Back</button>\n                </div>\n                <form>\n                    <label>\n                        Entity Name: <input value={this.state.nameInput} onChange={this.handleNameInputChange} />\n                    </label>\n                    <label>\n                        Entity Initiative: <input value={this.state.initiativeInput} onChange={this.handleInitiativeInputChange} />\n                    </label>\n                    <button onClick={(e) => this.addEntity(e, true)}>Add and Sort</button>\n                    <button onClick={(e) => this.addEntity(e, false)}>Add</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default function Main() {\n    return (\n        <Layout>\n            <InitiativeTracker></InitiativeTracker>\n        </Layout>\n    );\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAMA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAmBA;AAAA;AAAA;AACA;AACA;AArBA;AAuBA;AAAA;AAAA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAtCA;AAuCA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AATA;AACA;AAxCA;AAoDA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAxDA;AA0DA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA5DA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAfA;AAgBA;AACA;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAvHA;AACA;AAyHA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;A","sourceRoot":""}